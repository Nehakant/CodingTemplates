#include<bits/stdc++.h>
#define ll long long int
#define fio ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
using namespace std;
#define N 200005
int BLOCK_SIZE = sqrt(N) + 1;

ll ans[1000005];
ll ans2[N];

bool cmp(pair<ll,pair<ll, ll> >&p, pair<ll,pair<ll, ll> > &q) {
    
    int l1 = p.second.first, r1 = p.second.second;
    
    int l2 = q.second.first, r2 = q.second.second;
    
    int b1 = l1 / BLOCK_SIZE;
	int b2 = l2 / BLOCK_SIZE;
	if(b1 != b2)
		return b1 < b2;
	else
		return (b1 & 1) ? r1 < r2 : r1 > r2;    

}




int main()
{
	fio;
	int n,t,i,j,l,r;
	cin>>n;
	int arr[n+1];
	
	for(i=1;i<=n;i++)
	{
		cin>>arr[i];
		
		
	}
	// cout<<block_size<<endl;
	cin>>t;
	vector<pair<ll,pair<ll,ll> > >vec;

     for(i=0;i<t;i++)
     {
     	cin>>l>>r;
     //	l--;
     //	r--;
     	vec.push_back(make_pair(i,make_pair(l,r)));
     
     	
     	
	 }


	 sort(vec.begin(),vec.end(),cmp);
	
	 

	 l = 1, r = 0;
	 ll sum = 0;
	 unordered_map<ll,ll>mpp;
	 ll count=0;
	 for(i=0;i<vec.size();i++)
	 {
	 	int low=vec[i].second.first;
	 	int high=vec[i].second.second;
	 	
	 	 
		 
	 	
	 	while(r<high)
	 	{
	 		r++;
	 		mpp[arr[r]]++;
	 		if(mpp[arr[r]]==1)
	 		count++;
		 }
	//	 cout<<endl;
		 while(r>high)
		 {
		    mpp[arr[r]]--;
		    if(mpp[arr[r]]==0)
		    count--;
		 		r--;
		 	
		 	
		 }
		 
		  while(l>low)
		 {
		 	l--;
		 	mpp[arr[l]]++;
		 	if(mpp[arr[l]]==1)
		 	count++;
		 	
		 }
		 
		 
		 while(l<low)
		 {
		 	
		 	mpp[arr[l]]--;
		 	if(mpp[arr[l]]==0)
		 	count--;
		 		l++;
		 	//	cout<<sum<<" ";
		 	
		 }
		 
		
		
		 ans2[vec[i].first]=count;
	 	
	 //	cout<<sum<<endl;
	 	
	 }
	 for(i=0;i<t;i++)
	 {
	 	cout<<ans2[i]<<endl;
	 }
	 
	
	
	
	
	
}
