#include<bits/stdc++.h>
#define ll long long int
using namespace std;



struct node{
    ll open,close,full;
};
node seg[4000000];
string str;
void build(ll node,ll low,ll high)
{
	if(low==high)
	{
		if(str[low]=='(')
		{
			seg[node].open=1;
			seg[node].close=0;
		}
		else
		{
			seg[node].close=1;
			seg[node].open=0;
		}
		seg[node].full=0;
		return;
		
		
		
	}
	ll mid=(low+high)>>1;
	build(2*node+1,low,mid);
	build(2*node+2,mid+1,high);
	
	seg[node].open=seg[2*node+1].open+seg[2*node+2].open-min(seg[2*node+1].open,seg[2*node+2].close);
		seg[node].close=seg[2*node+1].close+seg[2*node+2].close-min(seg[2*node+1].open,seg[2*node+2].close);
			seg[node].full=seg[2*node+1].full+seg[2*node+2].full+min(seg[2*node+1].open,seg[2*node+2].close);
	
	
	
}
node query(int s,int e,int low,int high,int pos)
{
    if(e<low or s>high)
    {
        node raj; 
        raj.open =0;
        raj.close = 0;
        raj.full=0;
        return raj;
    }
    if(s>=low and e<=high)
    {
        return seg[pos];
    }
    
        int mid=(s+e)/2;
        node ans1 = query(s,mid,low,high,2*pos+1);
        node ans2 = query(mid+1,e,low,high,2*pos+2); 
        node ans; 
        ans.open = ans1.open + ans2.open - min(ans1.open,ans2.close); 
        ans.close = ans1.close + ans2.close -  min(ans1.open,ans2.close);  
        ans.full = ans1.full + ans2.full + min(ans1.open,ans2.close); 
        
        return ans; 
    
}
node sum(ll pos,ll low,ll high,ll l,ll r)
{
	if(l>high||r<low)
	{
		node temp;
		temp.open=0;
			temp.close=0;
			temp.full=0;
			return temp;
		
		
	}
	if(low>=l&&high<=r)
	{
		
		return seg[pos];
		
	}
	
	ll mid=(low+high)>>1;
//	node ans1=new node();
	 node ans1=sum(2*pos+1,low,mid,l,r);
	
		node ans2=sum(2*pos+2,mid+1,high,l,r);
		
		node ans;
		
		ans.open=ans1.open+ans2.open-min(ans1.open,ans2.close);
		
			ans.close=ans1.close+ans2.close-min(ans1.open,ans2.close);
			
			ans.full=ans1.full+ans2.full+min(ans1.open,ans2.close);
			
			return ans;
		
		
	
	
	
	
}


int main()
{
	ll n,i,j,l,r,m;
    // string str;
	cin>>str;
	n=str.length();
	build(0,0,n-1);
	
	cin>>m;
	while(m--)
	{
		cin>>l>>r;
		l--;
		r--;
		cout<<2*sum(0,0,n-1,l,r).full<<endl;
		
		
		
	}
	
	
	
	
	
	
}
