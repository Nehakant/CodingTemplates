#include<bits/stdc++.h>
#define ll long long int
using namespace std;
#define fio ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
#define mp make_pair
#define fi first
#define se second
#define pb push_back
#define endl "\n"
#define maxpq priority_queue<ll>
#define minpq priority_queue<ll, vector<ll>, greater<ll> >
#define vi vector<ll>
#define pii pair<ll, ll>
#define vii vector<pii>
#define for0(i, n) for (int i = 0; i < n; i++)
#define for1(i, n) for (int i = 1; i <= n; i++)
#define loop(i,a,b) for (int i = a; i < b; i++)
#define bloop(i,a,b) for (int i = a ; i>=b;i--)
#define MOD 1000000007
#define INT_MAXI 9000000000000000000
#define INT_MINI -9000000000000000000

ll max(ll a, ll b) {if (a > b) return a; else return b;}
ll min(ll a, ll b) {if (a < b) return a; else return b;}

const int dx[4] = { -1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};
int XX[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
int YY[] = { -1, 0, 1, -1, 1, -1, 0, 1 };

vector<ll>vec[200005];

vector<ll>vec2;
map<ll,ll>mpp;

ll tin=0,tout=0;

ll arr1[200005];
ll arr2[200005];



void dfs(ll node,ll par)
{
	tin++;
//	tout++;
	arr1[node]=tin;
	vec2.pb(node);
	
	for(auto itr:vec[node])
	{
		if(itr==par)
		continue;
		
		dfs(itr,node);
	}
	tout++;
	arr2[node]=tout;
	
}


int main()
{
    
   
  
	fio;
	
	ll i,j,a,b,c,k,type,m,t,s,n,q,x,u;
	
	cin>>n>>q;
	
	for(i=2;i<=n;i++)
	{
		cin>>x;
	
		vec[i].pb(x);
		vec[x].pb(i);
	}
	
	for(i=1;i<=n;i++)
	{
	    if(vec[i].size()!=0)
		sort(vec[i].begin(),vec[i].end());
	}
//	visited[1]=true;
	dfs(1,0);
	
	for(i=0;i<vec2.size();i++)
	{
	    ll node=vec2[i];
	//	cout<<node<<" "<<arr2[node]<<endl;
	mpp[node]=i;
	}
	while(q--)
	{
	    cin>>u>>k;
	    ll ind=mpp[u];
	    k--;
	    ll flag=0;
	    if(ind+k<vec2.size())
	    {
	        ll val1=arr2[u];
	        ll val2=arr2[vec2[ind+k]];
	        if(val1>=val2)
	        {
	            cout<<vec2[ind+k]<<endl;
	            flag=1;
	        }
	    }
	    if(flag==0)
	    {
	        cout<<"-1"<<endl;
	    }
	}
	
}
    
	
   
	
  
	
	
	
	 
     

	
	










