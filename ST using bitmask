#include<bits/stdc++.h>
#define ll long long int
using namespace std;
#define fio ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
#define mp make_pair
#define fi first
#define se second
#define pb push_back
#define endl "\n"
#define maxpq priority_queue<ll>
#define minpq priority_queue<ll, vector<ll>, greater<ll> >
#define vi vector<ll>
#define pii pair<ll, ll>
#define vii vector<pii>
#define for0(i, n) for (int i = 0; i < n; i++)
#define for1(i, n) for (int i = 1; i <= n; i++)
#define loop(i,a,b) for (int i = a; i < b; i++)
#define bloop(i,a,b) for (int i = a ; i>=b;i--)
#define MOD 1000000007
#define INT_MAXI 9000000000000000000
const int dx[4] = { -1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};
int XX[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
int YY[] = { -1, 0, 1, -1, 1, -1, 0, 1 };

ll arr2[100005][30];

ll seg[400005][30];


ll lazy[400005][30];
void build(ll node,ll low,ll high,ll pos)
{
	if(low==high)
	{
		seg[node][pos]=arr2[low][pos];
		return;
		
		
	}
	ll mid=(low+high)/2;
	
	build(2*node+1,low,mid,pos);
	build(2*node+2,mid+1,high,pos);
	seg[node][pos]=seg[2*node+1][pos]+seg[2*node+2][pos];
	
	
}

void update(ll node,ll low,ll high,ll l,ll r,ll pos)
{
	if(lazy[node][pos]!=0)
	{
		
		seg[node][pos]=(high-low+1)-seg[node][pos];
		
		if(low!=high)
		{
			lazy[2*node+1][pos]=1-lazy[2*node+1][pos];
			lazy[2*node+2][pos]=1-lazy[2*node+2][pos];
			
		}
		lazy[node][pos]=0;
		
		
	}
	if(l>high||r<low)
	return;
	
	if(low>high)
	return;
	
	if(low>=l&&high<=r)
	{
		seg[node][pos]=(high-low+1)-seg[node][pos];
		
		if(low!=high)
		{
			lazy[2*node+1][pos]=1-lazy[2*node+1][pos];
			lazy[2*node+2][pos]=1-lazy[2*node+2][pos];
			
		}
		return;
		
	}
	ll mid=(low+high)>>1;
	
	update(2*node+1,low,mid,l,r,pos);
	
	update(2*node+2,mid+1,high,l,r,pos);
	
	seg[node][pos]=seg[2*node+1][pos]+seg[2*node+2][pos];
	
	
	
}

ll sum(ll node,ll low,ll high,ll l,ll r,ll pos)
{
		if(lazy[node][pos]!=0)
	{
		
		seg[node][pos]=(high-low+1)-seg[node][pos];
		
		if(low!=high)
		{
			lazy[2*node+1][pos]=1-lazy[2*node+1][pos];
			lazy[2*node+2][pos]=1-lazy[2*node+2][pos];
			
		}
		lazy[node][pos]=0;
		
		
	}
		if(l>high||r<low)
	return 0;
	
	if(low>high)
	return 0;
	
	if(low>=l&&high<=r)
	return seg[node][pos];
	
	ll mid=(low+high)>>1;
	
	return sum(2*node+1,low,mid,l,r,pos)+sum(2*node+2,mid+1,high,l,r,pos);
	
	
}




int main()
{
   memset(arr2,0,sizeof(arr2));
   memset(lazy,0,sizeof(lazy));
   fio;
   ll n,m,i,j,l,r,x;
   cin>>n;
   ll arr[n];
   for(i=0;i<n;i++)
   {
   	cin>>arr[i];
   }
   for(i=0;i<n;i++)
   {
   	ll num=arr[i],pos=0;
   	  while(num!=0)
   	  {
   	  	ll x=num&1;
   	  	if(x==1)
   	  	{
   	  		arr2[i][pos]=1;
			 }
			 pos++;
			 num>>=1;
   	  	
   	  	
		 }
   	
   }
   for(i=0;i<25;i++)
   {
   	  build(0,0,n-1,i);
   	
   }
   cin>>m;
   while(m--)
   {
   	  ll type;
   	  cin>>type;
   	  if(type==1)
   	  {
   	  	cin>>l>>r;
   	  	l--;
   	  	r--;
   	  	ll ans=0;
   	  	for(i=0;i<=25;i++)
   	  	{
   	  		ans+=(1<<i)*sum(0,0,n-1,l,r,i);
			 }
			 cout<<ans<<endl;
   	  	
		 }
		 
		 else
		 {
		 	cin>>l>>r>>x;
		 	l--;
		 	r--;
		 	for(i=0;i<=25;i++)
		 	{
		 		ll y=(1<<i)&x;
		 		if(y!=0)
		 		update(0,0,n-1,l,r,i);
		 		
			 }
		 	
		 	
		 }
   	
   	
   }
   
 }







 
